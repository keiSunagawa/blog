<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on くらげ.log</title>
    <link>https://blog.kerfume.me/posts/</link>
    <description>Recent content in Posts on くらげ.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Dec 2020 14:55:09 +0900</lastBuildDate>
    
	<atom:link href="https://blog.kerfume.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s 1.20の更新後のEKSのコンテナランタイムについて</title>
      <link>https://blog.kerfume.me/posts/eks-containerd-k8s-120/</link>
      <pubDate>Thu, 24 Dec 2020 14:55:09 +0900</pubDate>
      
      <guid>https://blog.kerfume.me/posts/eks-containerd-k8s-120/</guid>
      <description>背景 k8s 1.20よりdocker用のCRIであるdockershimがサポートされなくなるので
それに伴いeksではなにをすればいいのか、コンテナランタイムの代替えとしては何を利用するのかを調べた
コンテナランタイム 文字通りコンテナを実行するモジュール
現在の選択肢としてはdocker, containerd, CRI-Oなどがある
k8sではコンテナランタイムに対してCRIという規約に従ったgrpcサーバを要求する
CRI(ContainerRuntimeInterface) k8sがコンテナランタイムに要求するインタフェースの規約
コンテナランタイムはこれに則ったgrpcサーバを用意する必要がある
k8s自体元々(1.12より前)は利用できるコンテナランタイムがdockerのみだったが
他のランタイムも利用できるようにするためにこの規約を定めた
が、当然docker自身はこの規約に則ったインタフェースは持っていないため
docker用のCRIとしてk8s側がdockershimというものを用意していた
k8s 1.20 Dockershimが非推奨になった
以後Dockershimのメンテがされなくなるので他のコンテナランタイムを利用してね、と公式からのアナウンスがある
containerdやCRI-OはCRIがネイティブサポートされている
on EKS 今回の本題
EKSではどう対応されるのかを調べる
2020/12/24時点
AmazonLinux最適化AMIではコンテナランタイムは引き続きdockerだった
$ kube get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME ip-xxx-xxx-xxx-xxx.ap-northeast-1.compute.internal Ready &amp;lt;none&amp;gt; 114m v1.18.9-eks-d1db3c xxx.xxx.xxx.xxx &amp;lt;none&amp;gt; Amazon Linux 2 4.14.209-160.335.amzn2.x86_64 docker://19.3.6 Bottlerocket最適化AMIの場合containerdらしいけどこちらは
cluster managed node groupを利用している場合は現在選択できない
Fargateの場合はcontainerdが採用されているようだ
$ kube get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME fargate-ip-xxx-xxx-xxx-xxx.</description>
    </item>
    
    <item>
      <title>Gatekeeper Memo</title>
      <link>https://blog.kerfume.me/posts/gatekeeper-memo/</link>
      <pubDate>Sun, 13 Dec 2020 15:47:15 +0900</pubDate>
      
      <guid>https://blog.kerfume.me/posts/gatekeeper-memo/</guid>
      <description>この記事は FOLIO Advent Calendar 2020 20日目の記事です
前回の記事でhelmを交えたargoCDの話をすると言ったな、あれは嘘だ
調べてて面白そうだったので今回は Gatekeeper で利用されるpolicy記述言語Regoについてのおぼえ書きということにさせていただきます
Gatekeeper policy記述言語Regoを利用してk8s上のマニフェストに対してpolicyを設定できるツール
実装的にはk8s側ではAdmission Webhooks, Regoを利用するためにOPA, それぞれを利用して作られています
これによってk8sマニフェストに対してpolicy制限を実現し、特定のキーの利用の強制や逆に制限をかけることができる
 今回はそのpolicyを記述するための言語Regoについて書きます
実際にGatekeeperを触ってからの方がwhyを理解しやすいと思うのでREADMEの How to Use Gatekeeperを実施してから
読むのを推奨します
Rego policy記述言語
一般的な逐次処理を記載していくタイプの言語とは違い
宣言的に条件を記載していき、結果値を得ることを目的としている
prologとか定理証明系で使われている言語の流れを汲んでいるらしい(よく知らない)
playgroundも存在し、以降のコードスニペットはすべてplayground上で動くものを記載している
変数 x := 3 regoの変数には利用方法が二種類ある
ひとつは一般的なプログラミング言語同様値を束縛するためのもの
もうひとつは少し曲者で未束縛の変数を利用した場合にその変数が取りうる可能性を持つ値の範囲で束縛する
この場合「束縛」という表現は正しくないと思うが、自分的な理解しやすい表現なのであえてこう表現する
x := [1, 2, 3] y { some i x[i] i == 0 # 1や2を指定してもtrue } 上記の例では i は x のindexの範囲の値を取るため i は0もしくは1もしくは2となる
ルール構文 &amp;lt;ruleName&amp;gt; { .. } に関しては今の所説明をしていないが後述する、一旦は一般的なプログラミング言語でいう
ブロック構文に名前がついたものとでも思っていただければいい
Regoでは代入式を除く殆どの式が値の絞り込みを行うためのもので、上記の例でもルール y の2行目 x[i] の時点では</description>
    </item>
    
    <item>
      <title>Helm Template Tips</title>
      <link>https://blog.kerfume.me/posts/helm-template/</link>
      <pubDate>Sun, 06 Dec 2020 17:31:55 +0900</pubDate>
      
      <guid>https://blog.kerfume.me/posts/helm-template/</guid>
      <description>この記事は過去に Qiita で書いたものの転載です
Helm https://helm.sh/
Helmはk8sにおけるパッケージマネージャーのようなもです
k8sのService, Deployment, ConfigMap, etcをひとつのまとまり(Chartと呼ばれる)として構成し、それらのk8sクラスタへのinstall/update/deleteなどの責務を担当してくれます
公式や誰かの作ったChartをinstallするほか、自分たちの作ってるアプリケーションのChartを作成することでマニフェストファイルの共通化やdeploy/rollbackを簡単にすることができます
当記事では後者の用途を前提として進めます
Helmの基礎を理解頂いてる方は Template までスキップして頂けると、今回の本題はそちらですので
Init Helmのインストール手順は公式を参照、以下はHelm/k8sをinstallしている前提で進めます
Chartのスケルトン生成 $ helm create first-app Creating first-app $ tree first-app/ first-app/ ├── Chart.yaml ├── charts ├── templates │ ├── NOTES.txt │ ├── _helpers.tpl │ ├── deployment.yaml │ ├── ingress.yaml │ ├── service.yaml │ └── tests │ └── test-connection.yaml └── values.yaml 3 directories, 8 files helm create &amp;lt;chart name&amp;gt; でChartのスケルトンを生成できます
生成されるファイル/ディレクトリ   Chart.yaml</description>
    </item>
    
    <item>
      <title>Helm Tips</title>
      <link>https://blog.kerfume.me/posts/helm-tips/</link>
      <pubDate>Sun, 06 Dec 2020 13:49:40 +0900</pubDate>
      
      <guid>https://blog.kerfume.me/posts/helm-tips/</guid>
      <description>この記事は FOLIO Advent Calendar 2020 8日目の記事です
FOLIOでは現在k8sを利用した新しいアプリケーション基盤を検証しています
その中でk8sマニフェストを管理する上で欠かせないツール Helm についての知見を少しだけ共有しようと思います
Helmって？ https://helm.sh/
k8s上で動くパッケージマネージャ
パッケージマネージャとはあるinfraの上で動くアプリケーションの
インストール/アンインストールの管理などを行ってくれるソフトウェアのことを指します
k8sというinfraの上でhelmというパッケージマネージャーが扱う「アプリケーション」は
マニフェストファイルの集合となります
helmの世界ではパッケージはChartと呼ばれ、Chartリポジトリと呼ばれるhttp(s) serverにて管理されます
標準では stableリポジトリ が用意されていますが
ユーザ側で用意した独自リポジトリも使用することが可能です
HelmのChart構造やtemplate構文については以下の記事を参照ください
https://keisunagawa.github.io/blog/posts/helm-template/
Local Chart helmはChartリポジトリからChartをインストールする他、localに存在するChartをディレクトリ指定で
直接インストールすることも可能です
この方法は検証段階や、privateなChartリポジトリを建てる環境が存在しない場合などに役に立ちます
Install Tips helm Chartは helm install &amp;lt;release名&amp;gt; &amp;lt;chart名&amp;gt; コマンドによってk8sクラスタ上へインストールします
またインストール済みのChartについては helm upgrade コマンドでversionを更新することができます
&amp;lt;release名&amp;gt; が違う場合は同じChartを複数インストールすることも可能です、ただしこの場合別名Chart同士でresource名の
コンフリクトが発生しないことを前提としています
versionというのはChart自身のversionのことでdocker imageのversionなどはChartのversionもしくはinstall時に
引き渡す values.yaml の値によって決定されます、つまりChartの内容次第ということになります
helm upgrade --install とすることでinstall操作とupgrade操作を同時に行えます
これは新規Chartの場合install、インストール済みChartの場合はupgradeを行うというコマンドになります
Local Chartは helm install &amp;lt;release名&amp;gt; &amp;lt;chart dir&amp;gt; とすることでインストールすることができます
以下install(upgrade)時によく使う引数をいくつかpickupします
   flag      --create-namespace -nで指定したnamespaceが存在しない場合自動的に作成します   --atomic 何れかのマニフェスト適用に失敗した場合、install(upgrade)コマンド発行前の状態に戻します   --timeout install(upgrade)タイムアウトまでの時間を設定します外部リソースと連動したk8s resourceを発行するChartなどはタイムアウト値を伸ばすことを推奨します   --wait Podリソースなどが稼働状態になるのまでwaitしますただし、timeout時間までに稼働状態にならなかった場合はfailとなります   --values -f 利用するvalues.</description>
    </item>
    
  </channel>
</rss>