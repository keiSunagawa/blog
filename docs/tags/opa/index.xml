<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opa on くらげ.log</title>
    <link>https://blog.kerfume.me/tags/opa/</link>
    <description>Recent content in opa on くらげ.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Dec 2020 15:47:15 +0900</lastBuildDate>
    
	<atom:link href="https://blog.kerfume.me/tags/opa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gatekeeper Memo</title>
      <link>https://blog.kerfume.me/posts/gatekeeper-memo/</link>
      <pubDate>Sun, 13 Dec 2020 15:47:15 +0900</pubDate>
      
      <guid>https://blog.kerfume.me/posts/gatekeeper-memo/</guid>
      <description>この記事は FOLIO Advent Calendar 2020 20日目の記事です
前回の記事でhelmを交えたargoCDの話をすると言ったな、あれは嘘だ
調べてて面白そうだったので今回は Gatekeeper で利用されるpolicy記述言語Regoについてのおぼえ書きということにさせていただきます
Gatekeeper policy記述言語Regoを利用してk8s上のマニフェストに対してpolicyを設定できるツール
実装的にはk8s側ではAdmission Webhooks, Regoを利用するためにOPA, それぞれを利用して作られています
これによってk8sマニフェストに対してpolicy制限を実現し、特定のキーの利用の強制や逆に制限をかけることができる
 今回はそのpolicyを記述するための言語Regoについて書きます
実際にGatekeeperを触ってからの方がwhyを理解しやすいと思うのでREADMEの How to Use Gatekeeperを実施してから
読むのを推奨します
Rego policy記述言語
一般的な逐次処理を記載していくタイプの言語とは違い
宣言的に条件を記載していき、結果値を得ることを目的としている
prologとか定理証明系で使われている言語の流れを汲んでいるらしい(よく知らない)
playgroundも存在し、以降のコードスニペットはすべてplayground上で動くものを記載している
変数 x := 3 regoの変数には利用方法が二種類ある
ひとつは一般的なプログラミング言語同様値を束縛するためのもの
もうひとつは少し曲者で未束縛の変数を利用した場合にその変数が取りうる可能性を持つ値の範囲で束縛する
この場合「束縛」という表現は正しくないと思うが、自分的な理解しやすい表現なのであえてこう表現する
x := [1, 2, 3] y { some i x[i] i == 0 # 1や2を指定してもtrue } 上記の例では i は x のindexの範囲の値を取るため i は0もしくは1もしくは2となる
ルール構文 &amp;lt;ruleName&amp;gt; { .. } に関しては今の所説明をしていないが後述する、一旦は一般的なプログラミング言語でいう
ブロック構文に名前がついたものとでも思っていただければいい
Regoでは代入式を除く殆どの式が値の絞り込みを行うためのもので、上記の例でもルール y の2行目 x[i] の時点では</description>
    </item>
    
  </channel>
</rss>