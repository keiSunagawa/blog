<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on Kerfume Blog</title>
    <link>https://keisunagawa.github.io/blog/tags/k8s/</link>
    <description>Recent content in k8s on Kerfume Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 06 Dec 2020 17:31:55 +0900</lastBuildDate>
    
	<atom:link href="https://keisunagawa.github.io/blog/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Helm Template Tips</title>
      <link>https://keisunagawa.github.io/blog/posts/helm-template/</link>
      <pubDate>Sun, 06 Dec 2020 17:31:55 +0900</pubDate>
      
      <guid>https://keisunagawa.github.io/blog/posts/helm-template/</guid>
      <description>この記事は過去に Qiita で書いたものの転載です
Helm https://helm.sh/
Helmはk8sにおけるパッケージマネージャーのようなもです
k8sのService, Deployment, ConfigMap, etcをひとつのまとまり(Chartと呼ばれる)として構成し、それらのk8sクラスタへのinstall/update/deleteなどの責務を担当してくれます
公式や誰かの作ったChartをinstallするほか、自分たちの作ってるアプリケーションのChartを作成することでマニフェストファイルの共通化やdeploy/rollbackを簡単にすることができます
当記事では後者の用途を前提として進めます
Helmの基礎を理解頂いてる方は Template までスキップして頂けると、今回の本題はそちらですので
Init Helmのインストール手順は公式を参照、以下はHelm/k8sをinstallしている前提で進めます
Chartのスケルトン生成 $ helm create first-app Creating first-app $ tree first-app/ first-app/ ├── Chart.yaml ├── charts ├── templates │ ├── NOTES.txt │ ├── _helpers.tpl │ ├── deployment.yaml │ ├── ingress.yaml │ ├── service.yaml │ └── tests │ └── test-connection.yaml └── values.yaml 3 directories, 8 files helm create &amp;lt;chart name&amp;gt; でChartのスケルトンを生成できます
生成されるファイル/ディレクトリ   Chart.yaml</description>
    </item>
    
  </channel>
</rss>